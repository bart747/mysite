<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog-rss on UI design and development</title>
    <link>https://bart747.github.io/blog/index.xml</link>
    <description>Recent content in Blog-rss on UI design and development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Apr 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://bart747.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>On Fragility of Plans and Adaptability: How Buildings Learn</title>
      <link>https://bart747.github.io/adaptability-planning/</link>
      <pubDate>Tue, 25 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://bart747.github.io/adaptability-planning/</guid>
      <description>&lt;p&gt;&lt;small&gt;30 min&lt;/small&gt;&lt;/p&gt;

&lt;div class=&#34;wrapper--nopad&#34;&gt; 
&lt;div class=&#34;video&#34;&gt;
&lt;iframe src=&#34;https://www.youtube.com/embed/AvEqfg2sIH0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;time is the main architect&lt;/li&gt;
&lt;li&gt;design with adaptability in mind&lt;/li&gt;
&lt;li&gt;people will have to or want to change their buildings in the future&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I noticed many similar problems in software design.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s the first part of six-part BBC TV series &lt;em&gt;How Buildings Learn&lt;/em&gt;.
Written and presented by Stewart Brand.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5 Notes on How to Design a Resilient UI</title>
      <link>https://bart747.github.io/resilient-ui/</link>
      <pubDate>Wed, 05 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://bart747.github.io/resilient-ui/</guid>
      <description>&lt;h2 id=&#34;modularity&#34;&gt;Modularity&lt;/h2&gt;

&lt;p&gt;The most interesting things happen once your software is in real use.
That&amp;rsquo;s when you can really see what&amp;rsquo;s working and what to change.
It brings us to the importance of modularity.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Modular UIs are easier to edit in the long run.
When your interface is divided into distinct parts, you can also separate chunks of code by following that divisions.
Than you can adjust to the real world without tedious redesigns:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can just swap UI modules in an HTML or template file.&lt;/li&gt;
&lt;li&gt;You can edit a module in its own file &amp;mdash; no need to dig into complex code that&amp;rsquo;s responsible for many things.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;embrace-foundations&#34;&gt;Embrace Foundations&lt;/h2&gt;

&lt;p&gt;If I need to pick between working on something essential or adding bells and whistles, I pick essentials.
It&amp;rsquo;s just hard to be really good at all of them, so why even focus on &lt;em&gt;nice to haves&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Working extra on things like clarity (intuitiveness, readability) and speed
will give you more than any neophiliac thing.&lt;/p&gt;

&lt;h2 id=&#34;simplicity-is-tricky&#34;&gt;Simplicity is Tricky&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s easy to achieve perceived simplicity and pay for it with real complexity.
For instance, you can make an intuitive UI while ignoring clarity of its implementation.
Sooner or later it will cause all kinds of unexpected problems.&lt;/p&gt;

&lt;p&gt;Real simplicity of an interface means neat visuals AND clear implementation.
To achieve that, you often need to sacrifice some non-crucial features.&lt;/p&gt;

&lt;h2 id=&#34;smooth-interactions&#34;&gt;Smooth Interactions&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s an overwhelming variety of internet browsing devices on the market.
We need to think about what will make the product work smoothly on a sub-average hardware and half-decent wi-fi.
People will often use your stuff at train stations, airports and in restaurants.&lt;/p&gt;

&lt;h2 id=&#34;words-win&#34;&gt;Words Win&lt;/h2&gt;

&lt;p&gt;People say “a picture is like a thousand words”.
But a picture will not make a proposition as clear and precise as a well designed sentence.
That&amp;rsquo;s why I like typography.
Good typography is a tool to achieve clarity.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Henry Ford on What Promoted His Cars The Most</title>
      <link>https://bart747.github.io/ford-marketing/</link>
      <pubDate>Thu, 15 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://bart747.github.io/ford-marketing/</guid>
      <description>&lt;p&gt;Oldie but goodie. Quotes form Henry Ford&amp;rsquo;s &lt;i&gt;My Life and Work&lt;/i&gt; on his experiences with advertising/marketing.&lt;/p&gt;

&lt;h2 id=&#34;racing&#34;&gt;Racing&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;I designed a two-cylinder enclosed engine of a more compact type than I had before used,
fitted it into a skeleton chassis,
found that I could make speed, and arranged a race with Winton.
We met on the Grosse Point track at Detroit.
I beat him. That was my first race, and it brought advertising of the only kind that people cared to read.
The public thought nothing of a car unless it made speed—unless it beat other racing cars.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &amp;ldquo;999&amp;rdquo; did what it was intended to do: It advertised the fact that I could build a fast motorcar.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;lawsuit&#34;&gt;Lawsuit&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The powerful combination of manufacturers who called themselves the &amp;ldquo;licensed manufacturers&amp;rdquo;
because they operated under licenses from the patentee,
brought suit against us as soon as we began to be a factor in motor production.
&lt;br&gt;[&amp;#8230;]&lt;/p&gt;

&lt;p&gt;The idea was spread that if the suit finally went against me, every man who owned a Ford car would be prosecuted.
&lt;br&gt;[&amp;#8230;]&lt;/p&gt;

&lt;p&gt;We thought that the bond would give assurance to the buyers—that they needed confidence.
They did not.
We sold more than eighteen thousand cars—nearly double the output of the previous year—and
I think about fifty buyers asked for bonds—perhaps it was less than that.&lt;/p&gt;

&lt;p&gt;As a matter of fact, probably nothing so well advertised the Ford car and the
Ford Motor Company as did this suit.
It appeared that we were the under dog and we had the public&amp;rsquo;s sympathy.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Working on Ambitious Projects: Jonathan Blow on Game Design</title>
      <link>https://bart747.github.io/ambitious-projects/</link>
      <pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://bart747.github.io/ambitious-projects/</guid>
      <description>&lt;p&gt;&lt;small&gt;67 minutes&lt;/small&gt;
&lt;div class=&#34;wrapper--nopad&#34;&gt;
&lt;div class=&#34;video&#34;&gt;
&lt;iframe src=&#34;https://www.youtube.com/embed/d0m0jIzJfiQ&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;With emphasis on mental and philosophical side of creating complicated things.
It&amp;rsquo;s about handling negative emotions, picking the right thing to work on, creative process.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Structuring HTML Form Validation Indicators</title>
      <link>https://bart747.github.io/html-indicators/</link>
      <pubDate>Mon, 24 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://bart747.github.io/html-indicators/</guid>
      <description>&lt;p&gt;Should I add a &amp;lsquo;success&amp;rsquo; class to an input element or some other part of my form?
How to show an error indicator during live validation? How to manage a few different ways of validation?&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a code example that makes these problems simpler.
It makes adding CSS classes cleaner.
It allows you to make flexible JavaScript loops that can go through many different inputs easily and check them.
It support&amp;rsquo;s many different ways of indicating errors.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m showing code snippets first, than explaining them.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;container-input validate&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;admin-email&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    Your Email
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;span&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;icon-error&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;span&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;span&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;icon-success&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;span&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;
         &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;admin-email&amp;quot;&lt;/span&gt;
         &lt;span class=&#34;na&#34;&gt;autocomplete&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here&amp;rsquo;s an example of JS loop that can check input values and much more:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;inputContainers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;elt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;elt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Because it goes through containers (DIVs), not inputs themselves,
we have easy access to everything inside them.
It can be, for instance, a label, an icon or a text below a field.&lt;/p&gt;

&lt;p&gt;In each iteration it can check what kind of input it&amp;rsquo;s dealing with, and
than attache a proper method of validation.&lt;/p&gt;

&lt;h2 id=&#34;input-with-an-error-indicator&#34;&gt;Input with an error indicator&lt;/h2&gt;

&lt;p&gt;The only difference is the last class name in the div element:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;container-input validate input-error&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;admin-email&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    Your Email
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;span&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;icon-error&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;span&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;span&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;icon-success&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;span&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;
         &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;admin-email&amp;quot;&lt;/span&gt;
         &lt;span class=&#34;na&#34;&gt;autocomplete&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;required&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now, try to find which classes will be used:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* icons */&lt;/span&gt;
&lt;span class=&#34;nc&#34;&gt;.validate&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;.icon-error&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nc&#34;&gt;.validate&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;.icon-success&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;none&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nc&#34;&gt;.input-error&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;.icon-error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;red&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;inline&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nc&#34;&gt;.input-success&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;.icon-success&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;green&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;inline&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/* text messages */&lt;/span&gt;
&lt;span class=&#34;nc&#34;&gt;.validate&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;.text-error&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;nc&#34;&gt;.validate&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;.text-success&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;none&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nc&#34;&gt;.input-error&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;.text-error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nc&#34;&gt;.input-success&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;.text-success&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;As you can see, I can show the right icon in the right color by adding just one CSS class.
Text messages work the same way.&lt;/p&gt;

&lt;p&gt;Indicators are not displayed by default.
Only when the container has an &lt;em&gt;error&lt;/em&gt; or a &lt;em&gt;success&lt;/em&gt; class a browser will show some of them.&lt;/p&gt;

&lt;p&gt;Manipulating CSS class names in only one DIV makes input validation easier.
The script has to tweak only one element to mark an error.&lt;/p&gt;

&lt;h2 id=&#34;short-conclusion&#34;&gt;Short Conclusion&lt;/h2&gt;

&lt;p&gt;Good data structures make your work simpler.
When a structure is right, a procedure that uses it can be more straight forward.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On Lazy Load Overuse and What You can Do Instead</title>
      <link>https://bart747.github.io/alt-lazy-load/</link>
      <pubDate>Wed, 19 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://bart747.github.io/alt-lazy-load/</guid>
      <description>&lt;p&gt;Lazy Load is a great idea, so it&amp;rsquo;s overused frequently.
Do you remember that situation when you scrolled down
quickly to get to the middle part and the picture wasn&amp;rsquo;t there yet.&lt;/p&gt;

&lt;p&gt;When using a plugin, you can use a threshold/offset option to fire the thing earlier.
But people can scroll fast.
If someone visits a site for, lets say,
the third time and knows that the part she wants is somewhere close to the bottom,
she will scroll down really, really fast.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;In that kind of situations it might be better to forget about typical Lazy Load.&lt;/p&gt;

&lt;p&gt;The simple trick that I like is to set up a couple of top images first,
wait for them,
than load the rest.
No waiting for a user to scroll-down.
The selected top images will get loaded faster than usual because they won&amp;rsquo;t share the bandwidth with others.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a very general example of the main mechanism:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;loadBottomImgs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

      &lt;span class=&#34;c1&#34;&gt;// when last image from the TOP group is ready, load the rest&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lastTopImg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;complete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;bottomImgs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getAttribute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;data-imgload&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
      
      &lt;span class=&#34;c1&#34;&gt;// otherwise, run the function again&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;loadBottomImgs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 

    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// each iteration gives top images some time&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// if the last top image is not complete after all iterations,&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// load the rest of images anyway&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;        
    &lt;span class=&#34;nx&#34;&gt;bottomImgs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getAttribute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;data-imgload&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;loadBottomImgs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are 10 available iterations.
Each one waits 200ms.
Than the script checks the image completion.&lt;/p&gt;

&lt;p&gt;If the last top image is ready, the script loads the bottom images and we&amp;rsquo;re done.&lt;/p&gt;

&lt;p&gt;If not, we have another iteration.&lt;/p&gt;

&lt;p&gt;If after all iterations the last top image is still not complete,
the script will load the bottom group without waiting for anything.&lt;/p&gt;

&lt;p&gt;The iteration limit is useful when a connection is slow and a user starts to scroll down the page almost immediately.
In that kind of situation speed of above the fold content is no longer a priority.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not a universal method.
You will need to tune the &lt;em&gt;count&lt;/em&gt; and the &lt;em&gt;setTimeout()&lt;/em&gt;.
Anyhow, it&amp;rsquo;s good to have it in a toolbox.&lt;/p&gt;

&lt;p&gt;(I hope it&amp;rsquo;s clear enough despite my limited English skills.)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Looking at Craftsmen</title>
      <link>https://bart747.github.io/craftsmen-at-work/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://bart747.github.io/craftsmen-at-work/</guid>
      <description>&lt;div class=&#34;wrapper--nopad&#34;&gt; 
  &lt;div class=&#34;video&#34;&gt;
    &lt;iframe src=&#34;https://www.youtube.com/embed/5tusreUDXUM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I enjoy looking at craftsmen at work.
You can learn from it by seeing the process, tricks of the trade, work on details that most people won&amp;rsquo;t even notice.&lt;/p&gt;

&lt;p&gt;It doesn&amp;rsquo;t matter that it&amp;rsquo;s not my field. It&amp;rsquo;s about mentality.&lt;/p&gt;

&lt;p&gt;Video made by &lt;a href=&#34;https://www.youtube.com/channel/UCMIjEnXruVHtvgSVf6TgfUg&#34;&gt;Wranglerstar&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Max Planck on New Ideas and Creative Work</title>
      <link>https://bart747.github.io/planck/</link>
      <pubDate>Fri, 09 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://bart747.github.io/planck/</guid>
      <description>&lt;p&gt;Here are few famous quotes related to creative work, by Max Planck:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A new scientific truth does not triumph by convincing
its opponents and making them see the light,
but rather because its opponents eventually die,
and a new generation grows up that is familiar with it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Anybody who has been seriously engaged in scientific work
of any kind realizes that over the entrance to the gates of the temple of
science are written the words: &lt;em&gt;Ye must have faith&lt;/em&gt;.
It is a quality which the scientist cannot dispense with.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Again and again the imaginary plan on which one attempts to build up
that order breaks down and then we must try another.
This imaginative vision and faith in the ultimate success
are indispensable.
The pure rationalist has no place here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;New scientific ideas never spring from a communal body,
however organized, but rather from the head of an individually
inspired researcher who struggles with his problems in lonely
thought and unites all his thought on one single point which is
his whole world for the moment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;More at &lt;a href=&#34;https://en.wikiquote.org/wiki/Max_Planck&#34;&gt;Planck Wikiquote&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Learning UI Design from Coins (on Contrast)</title>
      <link>https://bart747.github.io/ui-coins/</link>
      <pubDate>Fri, 19 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://bart747.github.io/ui-coins/</guid>
      <description>&lt;p&gt;Contrasts are one of key elements when it comes to usability. Lets take coins as an example.&lt;/p&gt;

&lt;p&gt;When it comes to look: at first glance you see differences in size, color (types of metals) and visual patterns.&lt;/p&gt;

&lt;p&gt;Feel in hand: some seem heavier, some lighter, some have different surfaces.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Some of these things will help you in one situation, some in another. It&amp;rsquo;s good that they exist.&lt;/p&gt;

&lt;p&gt;By analogy, you can do something similar with interfaces.
Font sizes of titles (h1, h2, h3) are well known, trivial example.
Forms are more tricky.&lt;/p&gt;

&lt;p&gt;Sign-up and sign-in forms often look similar and appear in similar places.
To create a useful contrasts, we can give them different titles and labels.
We need to remember that users should see what&amp;rsquo;s going on without careful reading.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Create an account&lt;/em&gt; will make a better title than &lt;em&gt;Sign up&lt;/em&gt;, when there&amp;rsquo;s also &lt;em&gt;Sign in&lt;/em&gt; on a page.
If you want to stay with &lt;em&gt;Sign up&lt;/em&gt;, changing &lt;em&gt;Sign in&lt;/em&gt; to &lt;em&gt;Log in&lt;/em&gt; will be a good idea.&lt;/p&gt;

&lt;p&gt;When it comes to input labels, &lt;em&gt;Your password&lt;/em&gt; and &lt;em&gt;Create a password&lt;/em&gt; are usefully different.
Way better than just &lt;em&gt;Password&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Two different things need to seem different at first sight.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Payment UIs Can be Used to Reduce Friction</title>
      <link>https://bart747.github.io/payment-ui-friction/</link>
      <pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://bart747.github.io/payment-ui-friction/</guid>
      <description>&lt;p&gt;A page with a final &amp;ldquo;buy&amp;rdquo; button or a credit card data form
is a huge friction trigger.
It&amp;rsquo;s the moment when you, as a buyer, think again about spendings
and transaction safety.
The fact that you&amp;rsquo;re about to say bye to some of your money triggers that.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;From a designer&amp;rsquo;s point of view, it&amp;rsquo;s a good place and moment to do a little
summary (again).
To remind a user about things like return policy, transaction safety
and shipping time.&lt;/p&gt;

&lt;p&gt;Even if you did that earlier in the process,
it&amp;rsquo;s sometimes good to repeat yourself.
Especially when it&amp;rsquo;s about user&amp;rsquo;s money or privacy.&lt;/p&gt;

&lt;p&gt;It will make the process appear safer. There will be fewer users moving step or
two back to just in case check data again.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How Not to Be Afraid of the Future: Web Development and Lindy Effect</title>
      <link>https://bart747.github.io/future/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://bart747.github.io/future/</guid>
      <description>&lt;p&gt;No one really knows the future,
but there are some pretty clear patterns worth exploring.
One of them is human nature and Lindy Effect.
Powerful things when combined together.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Lindy_effect&#34;&gt;Lindy Effect&lt;/a&gt; is a theory that says, in short, that the longer something exists,
the more likely it will survive in the future. It&amp;rsquo;s about things like
technology, books in print, old movies that people are still watching.&lt;/p&gt;

&lt;h2 id=&#34;repeatable-patterns&#34;&gt;Repeatable Patterns&lt;/h2&gt;

&lt;p&gt;Shopping with a smartphone sounds like a big, surprising shift in commerce. Right?
Actually it&amp;rsquo;s an effect of a pretty boring process.&lt;/p&gt;

&lt;p&gt;We communicate and sell since forever.
Once we figured out a phone, we communicate more at a distance
and deal with telemarketers.
Once we figured out the Internet, we get e-commerce, social
media and email.
Once many people got email addresses, we use them to communicate
and sell on a large scale.
And once we know we can do it at low cost or no cost, we
overdo it.&lt;/p&gt;

&lt;p&gt;Everything that can send signals remotely is
used to communicate and do business.&lt;/p&gt;

&lt;p&gt;And it&amp;rsquo;s something that supports our already present thinking patterns.
It&amp;rsquo;s never like “reshape your brain or die”.
Good new things are based on old, proven things. When something ignores the
past, it dies.&lt;/p&gt;

&lt;p&gt;When you see Google Maps, you know immediately that it&amp;rsquo;s a map. It looks similar
to the old ones. It could look different with todays technology, but would it be
better? When patterns are familiar, you know what&amp;rsquo;s going on.&lt;/p&gt;

&lt;p&gt;Technology can survive when it&amp;rsquo;s based on well established patterns.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Hint on How to Speed Up Jekyll Regeneration</title>
      <link>https://bart747.github.io/jekyll-speed/</link>
      <pubDate>Sun, 27 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://bart747.github.io/jekyll-speed/</guid>
      <description>&lt;p&gt;My Jekyll site was way too slow recently.
It took around 1 minute per regeneration and much more for starting a server.&lt;/p&gt;

&lt;p&gt;I made some improvement by excluding a few files from the conversion.&lt;/p&gt;

&lt;p&gt;_config.yml:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;exclude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;js&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;somefolder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;otherfolder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;It wasn&amp;rsquo;t a big improvement so I kept digging.
I re-installed gems.
Didn&amp;rsquo;t help.&lt;/p&gt;

&lt;p&gt;Then I found a solution that shortened the regeneration time to less than 0.2 second.
It was excluding even more stuff.&lt;/p&gt;

&lt;p&gt;Beside the blog,
I have also projects that use different node modules and other JS.
One &amp;lsquo;node_modules&amp;rsquo; folder turned to be the pain point. I didn&amp;rsquo;t exclude it because
it was hidden somewhere deeper in the directory.&lt;/p&gt;

&lt;p&gt;I reorganized my files so now it&amp;rsquo;s easy to locate that kind of stuff.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;exclude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;js&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;somefolder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;projects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/*/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node_modules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vim Typography: Better Readability and Look</title>
      <link>https://bart747.github.io/vim-typography/</link>
      <pubDate>Mon, 21 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://bart747.github.io/vim-typography/</guid>
      <description>&lt;p&gt;A few tricks to improve your Vim editor&amp;rsquo;s readability and theming.
All examples are for editing &lt;code&gt;.vimrc&lt;/code&gt; and &lt;code&gt;.gvimrc&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.gvimrc&lt;/code&gt; is for GUI specific commands.
For instance, you should use it for things that you want to see in gVim or MacVim
and can&amp;rsquo;t or don&amp;rsquo;t want to use when Vim is running via terminal.&lt;/p&gt;

&lt;h2 id=&#34;gui-specific&#34;&gt;GUI Specific:&lt;/h2&gt;

&lt;h3 id=&#34;theming-syntax-highlighter&#34;&gt;Theming (syntax highlighter)&lt;/h3&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;syntax&lt;/span&gt; enable
&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;dark&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;colorscheme&lt;/span&gt; themeName 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Color schemes are stored in &lt;code&gt;.vim/colors&lt;/code&gt; folder.&lt;/p&gt;

&lt;h3 id=&#34;fonts&#34;&gt;Fonts&lt;/h3&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;guifont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;Droid\ Sans\ Mono\ &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;&amp;quot;&amp;quot; or&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;guifont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;DejaVu\ Sans\ Mono:h13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, when there are spaces in a font name, you have to use
&lt;code&gt;\ &lt;/code&gt;before them. There are also system differences when it comes to picking size.&lt;/p&gt;

&lt;p&gt;This is an example of setup for many operating systems:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; has&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;gui_gtk2&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;guifont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;Droid\ Sans\ Mono\ &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;elseif&lt;/span&gt; has&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;gui_macvim&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;guifont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;Menlo\ Regular:h14
&lt;span class=&#34;k&#34;&gt;elseif&lt;/span&gt; has&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;gui_win32&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;guifont&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;Consolas:h11:cANSI
&lt;span class=&#34;k&#34;&gt;endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;linespace-almost-like-line-height-in-css&#34;&gt;Linespace (almost like line-height in CSS)&lt;/h3&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;linespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Linespace&lt;/code&gt; property doesn&amp;rsquo;t work exactly like
&lt;code&gt;line-height&lt;/code&gt; in CSS.
It sets the space between lines, not leading.&lt;/p&gt;

&lt;p&gt;The default is 0. I like to use something around 4 or 5&amp;mdash;it depends on
the font face.&lt;/p&gt;

&lt;h2 id=&#34;general&#34;&gt;General:&lt;/h2&gt;

&lt;h3 id=&#34;terminal-vs-gui&#34;&gt;Terminal vs GUI&lt;/h3&gt;

&lt;p&gt;Things listed below don&amp;rsquo;t look as well in a terminal as in a GUI rich editor
with a nice theme:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;error highlighting (ie: spellcheck),&lt;/li&gt;
&lt;li&gt;character limit line,&lt;/li&gt;
&lt;li&gt;current line highlight (not so bad but still worst than GUI apps).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes they work more like distractions than like handy hits.
Consider using some of them in &lt;code&gt;.gvimrc&lt;/code&gt; instead of &lt;code&gt;.vimrc&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;characters-per-line-limit&#34;&gt;Characters per line limit&lt;/h3&gt;

&lt;p&gt;Set and show 80 characters limit.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;textwidth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;colorcolumn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=+&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You&amp;rsquo;ll see a line after 80th column.&lt;/p&gt;

&lt;h3 id=&#34;line-numbers&#34;&gt;Line Numbers&lt;/h3&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;number&lt;/span&gt;          &lt;span class=&#34;c&#34;&gt;&amp;quot; show line numbers&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;numberwidth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;   &lt;span class=&#34;c&#34;&gt;&amp;quot; width of number bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;text-highlighting&#34;&gt;Text Highlighting&lt;/h3&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cursorline&lt;/span&gt;      &lt;span class=&#34;c&#34;&gt;&amp;quot; highlight current line&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;showmatch&lt;/span&gt;       &lt;span class=&#34;c&#34;&gt;&amp;quot; highlight matching &amp;lt;[{()}]&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;autoindenting&#34;&gt;Autoindenting&lt;/h3&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;autoindent&lt;/span&gt;      &lt;span class=&#34;c&#34;&gt;&amp;quot; set autoindenting on&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;copyindent&lt;/span&gt;      &lt;span class=&#34;c&#34;&gt;&amp;quot; copy the indentation from previous line&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;spell-check-word-completion&#34;&gt;Spell Check + Word Completion&lt;/h3&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;spell&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;spelllang&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;en_us
&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;complete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;+=&lt;/span&gt;kspell 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Press CTRL-N or CTRL-P in insert-mode to complete current word.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Research vs Making Decisions</title>
      <link>https://bart747.github.io/research-decision/</link>
      <pubDate>Sat, 19 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://bart747.github.io/research-decision/</guid>
      <description>&lt;p&gt;More often than not, research is something that prevents you from making a decision.
You want to be sure, so you seek more.
But your brain is somehow full of doubts all the time&amp;mdash;no matter what you know.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;You think you should have so clear picture in your head,
that when you start coding you&amp;rsquo;re sure it will be great.
If you&amp;rsquo;re not, you&amp;rsquo;re looking for information farther.&lt;/p&gt;

&lt;p&gt;All that pushes you away from reality.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s much better to prototype fast&amp;mdash;do something that barely works.
Than it&amp;rsquo;s no longer just a picture in your head.
It&amp;rsquo;s clickable.
You can see actual performance.&lt;/p&gt;

&lt;p&gt;Than, if you &lt;strong&gt;know where you&amp;rsquo;re going&lt;/strong&gt;, you know how to correct the course.
You make a decision about the next move and stop looking for crystal balls.&lt;/p&gt;

&lt;p&gt;BTW, have you heard about &lt;a href=&#34;https://www.youtube.com/watch?v=S8sqQ_p6aR8&#34;&gt;The Foolscap Method&lt;/a&gt;?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Henry Ford for Makers: Quotes on Design</title>
      <link>https://bart747.github.io/henry-ford-for-makers/</link>
      <pubDate>Tue, 10 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://bart747.github.io/henry-ford-for-makers/</guid>
      <description>&lt;p&gt;These are short excerpts from Henry Ford&amp;rsquo;s “My Life and Work”. I picked
the ones that will be helpful especially to makers&amp;mdash;designers, developers, etc.&lt;/p&gt;

&lt;h2 id=&#34;simplicity&#34;&gt;Simplicity&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;My effort is in the direction of simplicity.
&amp;hellip;
Because nearly everything that we make is much
more complex than it needs to be.
Our clothing, our food, our household furnishings—all could be
much simpler than they now are and at the same time be better looking.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
&lt;/p&gt;

&lt;h2 id=&#34;work-money&#34;&gt;Work/Money&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Thinking first of money instead of work brings on fear of failure
and this fear blocks every avenue of business—it makes a man afraid
of competition, of changing his methods, or of doing anything which
might change his condition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The way is clear for any one who thinks first of service—of
doing the work in the best possible way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Manufacturing is not buying low and selling high.
It is the process of buying materials fairly and,
with the smallest possible addition of cost,
transforming those materials into a consumable product and giving it
to the consumer.
Gambling, speculating, and sharp dealing, tend only to clog this progression.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;practicality&#34;&gt;Practicality&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;If you travel the roads in the neighbourhood of Dearborn you can
find all sorts of models of Ford cars.
They are experimental cars—they are not new models.
&amp;hellip;
If an idea seems good or seems even to have possibilities,
I believe in doing whatever is necessary to test out the idea from every angle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &amp;ldquo;Model T&amp;rdquo; had practically no features which were not contained
in some one or other of the previous models.
Every detail had been fully tested in practice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The men often try out little attachments of their own because,
concentrating on one thing, they can, if they have a mind that way,
usually devise some improvement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;None of our machines is ever built haphazardly. &amp;hellip;
Sometimes wooden models are constructed or again the parts are drawn
to full size on a blackboard. We are not bound by precedent but we
leave nothing to luck.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;s-common-knowledge-s&#34;&gt;&lt;s&gt;Common Knowledge&lt;/s&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;If ever I wanted to kill opposition by unfair means I would endow
the opposition with experts.
They would have so much good advice that I could be sure
they would do little work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Where most manufacturers find themselves quicker to make a change
in the product than in the method of manufacturing—we follow
exactly the opposite course.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I cannot discover that any one knows enough about anything on this
earth definitely to say what is and what is not possible.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>