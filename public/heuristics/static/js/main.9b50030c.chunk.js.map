{"version":3,"sources":["Note.tsx","NoteGroup.tsx","FetchAndShow.tsx","ShowSelectedOption.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Note","props","react_default","a","createElement","className","content","author","NoteGroup","i","collection","map","note","key","concat","category","src_Note","notesCodeNr","notesUxNr","notesGeneralNr","FetchAndShow","_useState","useState","_useState2","Object","slicedToArray","err","setErr","_useState3","_useState4","notesCodeStorage","setNotesCode","_useState5","_useState6","notesUxStorage","setNotesUX","_useState7","_useState8","notesGeneralStorage","setNotesGeneral","_useState9","_useState10","isLoaded","setIsLoaded","fetchNotes","notesNr","newContent","quantity","fetch","then","res","json","resultJson","tempArr","push","console","log","useEffect","isCodeFirst","src_NoteGroup","ShowSelectedOption","App","setIsCodeFirst","src_ShowSelectedOption","onClick","xmlns","width","height","viewBox","d","fill","src_FetchAndShow","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9b50030c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Note(props: any) {\n  \n  return (\n    <div className=\"Note-content\">\n      <div className=\"Note-body\">\n        {props.content}\n        {props.author}\n      </div>\n    </div>\n  );\n}\n\nexport default Note;","import React from 'react';\nimport Note from './Note';\n\nfunction NoteGroup(props: any) {\n  let i: number = 0;\n  return ( \n    props.collection.map( (note: string[])  => (\n      <div\n        key={`${props.category}-note-${i+=1}`}\n        className=\"NoteList-container\"\n      >\n        <Note content={note[0]} author={note[1]} />\n      </div>\n    )) \n  );\n}\n\nexport default NoteGroup;\n\n\n","import React, { useState, useEffect } from 'react';\nimport NoteGroup from './NoteGroup';\n\nlet notesCodeNr: number = 3;\nlet notesUxNr: number = 1;\nlet notesGeneralNr: number = 1;\n\nfunction FetchAndShow(props: any) {\n\n  const [err, setErr] = useState<any>();\n  const [notesCodeStorage, setNotesCode] = useState<string[]>([]);\n  const [notesUxStorage, setNotesUX] = useState<string[]>([]);\n  const [notesGeneralStorage, setNotesGeneral] = useState<string[]>([]);\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n\n  function fetchNotes(category: string, notesNr: number) {\n    let newContent: any = [];\n    let quantity: number = notesNr;\n\n    for (let i = 1; i <= quantity; i++) {\n      fetch(`./content/${category}-note-${i}.json`)\n        .then(res => res.json())\n        .then(\n        (resultJson) => { \n          let tempArr: string[] = [resultJson.content, resultJson.author]; \n          newContent.push(tempArr); \n\n          if (category === 'code') {\n            setNotesCode(newContent);\n          } else if (category === 'ux') {\n            setNotesUX(newContent);\n          } else {\n            setNotesGeneral(newContent);\n          } \n          setIsLoaded(true);\n\n        },\n        (err) => {\n          setErr(err);\n          setIsLoaded(true);\n          console.log(err);\n        })\n    }\n  }\n  \n  useEffect(() => {\n    fetchNotes('code', notesCodeNr);\n    fetchNotes('ux', notesUxNr);\n    fetchNotes('general', notesGeneralNr);\n  }, []);\n \n\n  if (err) {\n    return <div>Error while fetching</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  }\n  \n  if (props.isCodeFirst) {\n    return (\n      <section className=\"NoteList\">\n        <NoteGroup collection={notesCodeStorage} category={'code'}/>\n        <NoteGroup collection={notesGeneralStorage} category={'general'}/>\n        <NoteGroup collection={notesUxStorage} category={'ux'}/>\n      </section>\n    );\n  };\n  \n  return (\n    <section className=\"NoteList\">\n      <NoteGroup collection={notesUxStorage} category={'ux'}/>\n      <NoteGroup collection={notesGeneralStorage} category={'general'}/>\n      <NoteGroup collection={notesCodeStorage} category={'code'}/>\n    </section>\n  );\n}\n\nexport default FetchAndShow;","import React from 'react';\n\nfunction ShowSelectedOption(props: any) {\n  const isCodeFirst :boolean = props.isCodeFirst;\n  if (isCodeFirst) {\n    return (\n      <div>\n        <p>Order by priority:</p>\n        <div><span className={'highlight'}>Programming</span>\n        &emsp;\n        <span>UX/UI</span></div>   \n      </div>\n    )\n  }\n  return (\n    <div>\n        <p>Order by priority:</p>\n        <div><span>Programming</span>\n        &emsp;\n        <span className={'highlight'}>UX/UI</span></div>   \n      </div>\n  )\n}\n\nexport default ShowSelectedOption;","import React, { useState } from 'react';\nimport './App.css';\nimport FetchAndShow from './FetchAndShow';\nimport ShowSelectedOption from './ShowSelectedOption';\n\n\nfunction App() {\n\n  const [isCodeFirst, setIsCodeFirst] = useState<boolean>(true);\n\n  function handleClick() {\n    setIsCodeFirst(!isCodeFirst);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p> \n        <section className={'selector'}>\n          <ShowSelectedOption isCodeFirst={isCodeFirst}/>\n\n          <button className={'btn-round'} onClick={handleClick}>\n            <svg className={'btn-icon'} xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"30\"\n              height=\"30\"\n              viewBox=\"0 0 24 24\">\n              <path d=\"M19 8l-4 4h3c0 3.31-2.69 6-6 6-1.01 0-1.97-.25-2.8-.7l-1.46 1.46C8.97 19.54 10.43 20 12 20c4.42 0 8-3.58 8-8h3l-4-4zM6 12c0-3.31 2.69-6 6-6 1.01 0 1.97.25 2.8.7l1.46-1.46C15.03 4.46 13.57 4 12 4c-4.42 0-8 3.58-8 8H1l4 4 4-4H6z\"/>\n              <path d=\"M0 0h24v24H0z\"\n              fill=\"none\"/>\n            </svg>\n          </button>    \n\n        </section>\n      </header>\n      <main>\n        <FetchAndShow isCodeFirst={isCodeFirst}/>\n      </main>\n    </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}